# https://www.playframework.com/documentation/latest/Configuration



include "frontend.conf"

# An ApplicationLoader that uses Guice to bootstrap the application.
play.application.loader = "ApplicationLoader"

# Primary entry point for all HTTP requests on Play applications
play.http.requestHandler = "http.RequestHandler"


# An audit connector must be provided.
play.modules.enabled += "AuditModule"

# A metric filter must be provided
play.modules.enabled += "graphite.GraphiteMetricsModule"

# Provides an implementation and configures all filters required by a Platform frontend microservice.
play.modules.enabled += "frontend.FrontendModule"


# Session Timeout
# ~~~~
# The default session timeout for the app is 15 minutes (900seconds).
# Updating this is the responsibility of the app - it must issue a new cookie with each request or the session will
# timeout 15 minutes after login (regardless of user activity).
# session.maxAge=900

# Session configuration
# ~~~~~
application.session.httpOnly=false

application.session.secure=false

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
application.global=frontendtemplateprovider.MicroserviceGlobal

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# !!!WARNING!!! DO NOT CHANGE THIS ROUTER
play.http.router=prod.Routes

taas.environment="dev"

# Controller
# ~~~~~
# By default all controllers will have authorisation, logging and
# auditing (transaction monitoring) enabled.
# The below controllers are the default exceptions to this rule.

controllers {
    # 300 is the default, you may need to change this according to your needs
    confidenceLevel = 50


    controllers.AssetsController = {
        needsAuth = false
        needsLogging = false
        needsAuditing = false
    }

    controllers.template.Template = {
        needsAuth = false
        needsLogging = false
        needsAuditing = false
    }

}


# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/), by providing a logger.xml file in the conf directory .

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG


play.filters.hosts{

    # Allow all hosts
    #allowed = ["*"]  
    allowed = ["localhost:9000", "localhost:3333", "localhost"]
}



play.http.errorHandler = "handlers.CustomErrorHandler"
play.http.context = "/api"
play.http.requestHandler = "play.http.DefaultHttpRequestHandler"

play.filters.csp {
    # Enable CSP
    enabled = true
    # Report only mode
    reportOnly = false
    # Report URI
    reportUri = "/csp-report"
    # Default source policy
    defaultSrc = ["'self'"]
    # Script source policy
    scriptSrc = ["'self'", "'unsafe-inline'", "'unsafe-eval'"]
    # Style source policy
    styleSrc = ["'self'", "'unsafe-inline'"]
}
play.filters.csp.nonce {
    enabled = true
    # Nonce for script tags
    scriptSrcNonce = "nonce"
    # Nonce for style tags
    styleSrcNonce = "nonce"
    # Nonce for img tags
    imgSrcNonce = "nonce"
    # Nonce for connect-src
    connectSrcNonce = "nonce"
    # Nonce for frame-src
    frameSrcNonce = "nonce"
    reportUri = "/csp-report"

    reportOnly = false
}

play.filters.cors {
    # Allow all origins
    allowedOrigins = ["*"]
    # Allow all HTTP methods
    allowedHttpMethods = ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
    # Allow all headers
    allowedHttpHeaders = ["*"]
    # Allow credentials
    allowCredentials = true
    # Expose headers
    exposedHeaders = ["Content-Disposition"]

    preflightMaxAge = 3 days
}


assets {
    version = "2.252.0"
    version = ${?ASSETS_FRONTEND_VERSION}
    url = "http://localhost:9032/assets/"
    minified = true
}


# Determines whether HTTP2 is enabled.
play.server.pekko.http2 {
  enabled = true
  enabled = ${?http2.enabled}
}


# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
db {
  default {
    pool="hikaricp"
    driver="org.postgresql.Driver"
    url="jdbc:postgresql://localhost:5432/mr_prod"
    url=${?MR_DATABASE_URL}

    username="mrdbuser"
    username=${?MR_DATABASE_USERNAME}

    password="mrdbpassword"
    password=${?MR_DATABASE_PASSWORD}

    hikaricp {
      # The database connection pool size can be tweaked based on available system resources and needed throughput.
      # Increasing this value causes parallel database transactions at the cost of more RAM, more CPU.
      # Note:
      #   - The pool size should be less than the total postgres connections. Postgres defaults to 100 connections and more powerful systems tend to allow many more.
      #     - https://www.postgresql.org/docs/current/runtime-config-connection.html
      #   - HikariCP defaults to 10.
      maximumPoolSize = 30
    }
  }
}

# SMTP: see https://github.com/playframework/play-mailer/blob/master/README.md for options
play.mailer {
    # host = "your.smtp.server.com"
    # user = "smtpusername"
    # password = "secret"
  }

  play.http.session.cookieName="PLAY_SESSION"

  play.http.session.domain="localhost"
  play.http.session.secure=false
  play.http.session.httpOnly=true
  play.http.session.sameSite="None"
  play.http.session.maxAge=60 minutes


  play.http.session.jwt.expiresAfter=60 minutes

# By default, Play returns errors in a HTML format.
# For a JSON API, itâ€™s more consistent to return errors in JSON.
  play.http.errorHandler = play.api.http.JsonHttpErrorHandler


#The session cookie uses the JWT cookie encoding. If you want, you can revert back to URL encoded cookie encoding by switching to play.api.mvc.LegacyCookiesModule in the application.conf file

play.modules.disabled+="play.api.mvc.CookiesModule"
play.modules.enabled+="play.api.mvc.LegacyCookiesModule"


# Session configuration
session = {

  # The cookie name
  cookieName = "PLAY_SESSION"

  # Whether the secure attribute of the cookie should be set to true
  secure = false

  # The max age to set on the cookie.
  # If null, the cookie expires when the user closes their browser.
  # An important thing to note, this only sets when the browser will discard the cookie.
  maxAge = null

  # Whether the HTTP only attribute of the cookie should be set to true
  httpOnly = true

  # The value of the SameSite attribute of the cookie. Set to null for no SameSite attribute.
  # Possible values are "lax", "strict" and "none". If misconfigured it's set to null.
  sameSite = "lax"

  # The domain to set on the session cookie
  # If null, does not set a domain on the session cookie.
  domain = null

  # The session path
  # Must start with /.
  path = ${play.http.context}

  jwt {
    # The JWT signature algorithm to use on the session cookie
    # uses 'alg' https://tools.ietf.org/html/rfc7515#section-4.1.1
    signatureAlgorithm = "HS256"

    # The time after which the session is automatically invalidated.
    # Use 'exp' https://tools.ietf.org/html/rfc7519#section-4.1.4
    expiresAfter = ${play.http.session.maxAge}

    # The amount of clock skew to accept between servers when performing date checks
    # If you have NTP or roughtime synchronizing between servers, you can enhance
    # security by tightening this value.
    clockSkew = 5 minutes

    # The claim key under which all user data is stored in the JWT.
    dataClaim = "data"
  }
}

# Configuration for Play's PekkoHttpServer
play {

  server {
    # The server provider class name
    provider = "play.core.server.PekkoHttpServerProvider"

    pekko {
      # How long to wait when binding to the listening socket
      bindTimeout = 5 seconds

      # How long a request takes until it times out. Set to null or "infinite" to disable the timeout.
      requestTimeout = infinite

      # Enables/disables automatic handling of HEAD requests.
      # If this setting is enabled the server dispatches HEAD requests as GET
      # requests to the application and automatically strips off all message
      # bodies from outgoing responses.
      # Note that, even when this setting is off the server will never send
      # out message bodies on responses to HEAD requests.
      # For Play to work correctly with WebSockets, you should avoid setting this config to "on",
      # see https://github.com/playframework/playframework/pull/7060
      transparent-head-requests = off

      # If this setting is empty the server only accepts requests that carry a
      # non-empty `Host` header. Otherwise it responds with `400 Bad Request`.
      # Set to a non-empty value to be used in lieu of a missing or empty `Host`
      # header to make the server accept such requests.
      # Note that the server will never accept HTTP/1.1 request without a `Host`
      # header, i.e. this setting only affects HTTP/1.1 requests with an empty
      # `Host` header as well as HTTP/1.0 requests.
      # Examples: `www.spray.io` or `example.com:8080`
      default-host-header = ""

      # The default value of the `Server` header to produce if no
      # explicit `Server`-header was included in a response.
      # If this value is null and no header was included in
      # the request, no `Server` header will be rendered at all.
      server-header = null
      server-header = ${?play.server.server-header}

      # Configures the processing mode when encountering illegal characters in
      # header value of response.
      #
      # Supported mode:
      # `error`  : default mode, throw an ParsingException and terminate the processing
      # `warn`   : ignore the illegal characters in response header value and log a warning message
      # `ignore` : just ignore the illegal characters in response header value
      illegal-response-header-value-processing-mode = warn

      # Enables/disables inclusion of an Tls-Session-Info header in parsed
      # messages over Tls transports (i.e., HttpRequest on server side and
      # HttpResponse on client side).
      #
      # See Pekko HTTP `pekko.http.server.parsing.tls-session-info-header` for
      # more information about how this works.
      tls-session-info-header = on

      # The maximum number of requests that are accepted (and dispatched to
      # the application) on one single connection before the first request
      # has to be completed.
      # Incoming requests that would cause the pipelining limit to be exceeded
      # are not read from the connections socket so as to build up "back-pressure"
      # to the client via TCP flow control.
      # A setting of 1 disables HTTP pipelining, since only one request per
      # connection can be "open" (i.e. being processed by the application) at any time.
      # This value must be > 0 and <= 1024.
      # ATTENTION:
      # Only enable HTTP pipelining if you _really_ know what you are doing. Nowadays, HTTP pipelining
      # is mostly used for benchmarks anyway. Basically all web browser and most common clients (like curl)
      # removed support for HTTP pipelining, since most client and server implementations were error prone.
      # Also the implemention used by Play can cause unexpected behaviour, e.g. see
      # https://github.com/playframework/playframework/issues/12351
      pipelining-limit = 1
    }
  }

}